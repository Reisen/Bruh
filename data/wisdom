Represent ideas directly in code.
Represent relationships among ideas directly in code (e.g., hierarchical, parametric, and
Represent independent ideas independently in code.
Keep simple things simple (without making complex things impossible).
Prefer statically type-checked solutions (when applicable).
Keep information local (e.g., avoid global variables, minimize the use of pointers).
Don’t overabstract (i.e., don’t generalize, introduce class hierarchies, or parameterize
Use constructors to establish invariants (§2.4.3.2, §13.4, §17.2.1).
Use constructor/destructor pairs to simplify resource management (RAII; §5.2, §13.3).
Avoid ‘‘naked’’ new and delete (§3.2.1.2, §11.2.1).
Use containers and algorithms rather than built-in arrays and ad hoc code (§4.4, §4.5,
Prefer standard-library facilities to locally developed code (§1.2.4).
Use exceptions, rather than error codes, to report errors that cannot be handled locally
Use move semantics to avoid copying large objects (§3.3.2, §17.5.2).
Use unique_ptr to reference objects of polymorphic type (§5.2.1).
Use shared_ptr to reference shared objects, that is, objects without a single owner that is
Don’t think of C++ as C with a few features added. C++ can be used that way, but only
Don’t write C in C++; that is often seriously suboptimal for both maintenance and performance.
Use the C++ standard library as a teacher of new techniques and programming styles.
Macro substitution is almost never necessary in C++. Use const (§7.5), constexpr (§2.2.3,
Don’t declare a variable before you need it, and initialize it immediately. A declaration
Don’t use malloc(). The new operator (§11.2) does the same job better, and instead of
Avoid void∗, unions, and casts, except deep within the implementation of some function
Minimize the use of arrays and C-style strings. C++ standard-library strings (§4.2), arrays
Avoid pointer arithmetic except in very specialized code (such as a memory manager) and
Don’t simply mimic Java style in C++; that is often seriously suboptimal for both maintainability and performance.
Use the C++ abstraction mechanisms (e.g., classes and templates): don’t fall back to a C
Use the C++ standard library as a teacher of new techniques and programming styles.
Don’t immediately invent a unique base for all of your classes (an Object class). Typically, you can do better without it for many/most classes.
Minimize the use of reference and pointer variables: use local and member variables
Remember: a variable is never implicitly a reference.
Think of pointers as C++’s equivalent to Java references (C++ references are more limited; there is no reseating of C++ references).
A function is not virtual by default. Not every class is meant for inheritance.
Use abstract classes as interfaces to class hierarchies; avoid ‘‘brittle base classes,’’ that is,
Represent ideas (concepts) directly in code, for example, as a function, a class, or an enumeration; §1.2.
Aim for your code to be both elegant and efficient; §1.2.
Don’t overabstract; §1.2.
Focus design on the provision of elegant and efficient abstractions, possibly presented as
Represent relationships among ideas directly in code, for example, through parameterization or a class hierarchy; §1.2.1.
Represent independent ideas separately in code, for example, avoid mutual dependencies
C++ is not just object-oriented; §1.2.1.
C++ is not just for generic programming; §1.2.1.
Prefer solutions that can be statically checked; §1.2.1.
Don’t panic! All will become clear in time; §2.1.
Express ideas directly in code; §3.2.
unique_ptr to represent unique ownership (§34.3.1)
shared_ptr to represent shared ownership (§34.3.2)
future and promise for returning a value from a task spawned on a separate thread
packaged_task to help launch tasks and connect up the mechanisms for returning a result
async() for launching of a task in a manner very similar to calling a function.
an engine that produces a sequence of random or pseudo-random values.
a distribution that maps those values into a mathematical distribution in a range.
For the final word on language definition issues, see the ISO C++ standard; §6.1.
First, implicit type conversion to T is applied if necessary (see §10.5).
Then, the resulting value is placed in a temporary variable of type T.
Finally, this temporary variable is used as the value of the initializer.
A union cannot have virtual functions.
A union cannot have members of reference type.
A union cannot have base classes.
If a union has a member with a user-defined constructor, a copy operation, a move operation, or a destructor, then that special function is deleted (§3.3.4, §17.6.4) for that union;
At most one member of a union can have an in-class initializer (§17.4.4).
A union cannot be used as a base class.
enum classes, for which the enumerator names (e.g., red) are local to the enum and their
‘‘Plain enums,’’ for which the enumerator names are in the same scope as the enum and
When compactness of data is important, lay out structure data members with larger members
the compiler first looks for members begin and end and tries to use those. If a begin or an
Otherwise, the compiler looks for a begin/end member pair in the enclosing scope. If
Named constants make the code easier to understand and maintain.
A variable might be changed (so we have to be more careful in our reasoning than for a
The language requires constant expressions for array sizes, case labels, and template
Embedded systems programmers like to put immutable data into read-only memory
If initialization is done at compile time, there can be no data races on that object in a
Sometimes, evaluating something once (at compile time) gives significantly better performance than doing so a million times at run time.
If either operand is of type long double, the other is converted to long double.
Otherwise, if either operand is unsigned long long, the other is converted to unsigned long
Prefer the standard library to other libraries and to ‘‘handcrafted code’’; §10.2.8.
Avoid complicated expressions; §10.3.3.
If in doubt about operator precedence, parenthesize; §10.3.3.
Avoid expressions with undefined order of evaluation; §10.3.2.
Avoid narrowing conversions; §10.5.2.
Define symbolic constants to avoid ‘‘magic constants’’; §10.4.1.
Don’t put objects on the free store if you don’t have to; prefer scoped variables.
When you construct an object on the free store, place its pointer into a manager object
Qualified by a type, T{...}, meaning ‘‘create an object of type T initialized by T{...}’’;
Unqualified {...}, for which the the type must be determined from the context of use;
If a lambda expression does not take any arguments, the argument list can be omitted.
A lambda expression’s return type can be deduced from its body. Unfortunately, that is
Use pass-by-value for small objects.
Use pass-by-const-reference to pass large values that you don’t need to modify.
Return a result as a return value rather than modifying an object through an argument.
Use rvalue references to implement move (§3.3.2, §17.5.2) and forwarding (§23.5.2.1).
Pass a pointer if ‘‘no object’’ is a valid alternative (and represent ‘‘no object’’ by nullptr).
Use pass-by-reference only if you have to.
Type std::initializer_list<T>, where the values of the list can be implicitly converted to T
A type that can be initialized with the values provided in the list
A reference to an array of T, where the values of the list can be implicitly converted to T
Use a variadic template (§28.6): this allows us to handle an arbitrary number of arbitrary
Use an initializer_list as the argument type (§12.2.3). This allows us to handle an arbitrary
Terminate the argument list with the ellipsis (...), which means ‘‘and maybe some more
Exact match; that is, match using no or only trivial conversions (for example, array name
Match using promotions; that is, integral promotions (bool to int, char to int, short to int,
Match using standard conversions (e.g., int to double, double to int, double to long double,
Match using user-defined conversions (e.g., double to complex<double>; §18.4)
Match using the ellipsis ... in a function declaration (§12.2.4)
Is it the caller’s task to avoid it? Yes, but what if the caller doesn’t?
Is it the implementer’s task to avoid it? If so, how is an error to be handled?
Make sure that every input has a valid result (so that we don’t have a precondition).
Assume that the precondition holds (rely on the caller not to make mistakes).
Check that the precondition holds and throw an exception if it does not.
Check that the precondition holds and terminate the program if it does not.
The amount of work needed to ensure this notion of ‘‘reliability’’ is too great to be done
The overhead in time and space is too great for the system to run acceptably (there will be
Functions written in other languages won’t obey the rules.
This purely local notion of ‘‘reliability’’ leads to complexities that actually become a burden to overall system reliability.
If H is the same type as E
If H is an unambiguous public base of E
If H and E are pointer types and [1] or [2] holds for the types to which they refer
If H is a reference and [1] or [2] holds for the type to which H refers
allocate() may throw an exception if no memory is available.
T’s copy constructor may throw an exception if it can’t copy val.
If the capacity of the vector assigned to is large enough to hold the assigned vector, we
An element assignment may be more efficient than an element destruction followed by an
Develop an error-handling strategy early in a design; §13.1.
The parser, doing syntax analysis: expr(), term(), and prim()
The lexer, composing tokens out of characters: Kind, Token, Token_stream, and ts
The symbol table, holding (string,value) pairs: table
The driver: main() and calculate()
The error handler: error() and number_of_errors
If some qualification is really common for several names, use a using-directive for that
If some qualification is common for a particular name from a namespace, use a using-declaration for that name.
The common environment for the functions implementing the parser
The external interface offered by the parser to its users
express a logically coherent set of features,
not give users access to unrelated features, and
not impose a significant notational burden on users.
Use namespaces to express logical structure; §14.3.1.
Avoid very short names for namespaces; §14.4.2.
If necessary, use namespace aliases to abbreviate long namespace names; §14.4.2.
Avoid placing heavy notational burdens on users of your namespaces; §14.2.2, §14.2.3.
Use separate namespaces for interfaces and implementations; §14.3.3.
Use the Namespace::member notation when defining namespace members; §14.4.
Use inline namespaces to support versioning; §14.4.6.
Place declarations in an unnamed namespace.
Declare an entity static.
they appear in different translation units, and
they are token-for-token identical, and
the meanings of those tokens are the same in both translation units.
reorganize our program to remove the redundancy, or
find a way to allow repeated inclusion of headers.
Initialize using constant expressions (note that built-in types without initializers are initialized to zero and that standard containers and strings are initialized to empty by linktime initialization).
Initialize using expressions without side effects.
Initialize in a known single-threaded ‘‘startup phase’’ of computation.
Use some form of mutual exclusion (§5.3.4, §42.3).
Use header files to represent interfaces and to emphasize logical structure; §15.1, §15.3.2.
A constructor specifying how objects/variables of the type are to be initialized (§16.2.5).
A set of functions allowing a user to examine a Date. These functions are marked const
A set of functions allowing the user to modify Dates without actually having to know the
Implicitly defined operations that allow Dates to be freely copied (§16.2.2).
A class, Bad_date, to be used for reporting errors as exceptions.
A set of useful helper functions. The helper functions are not members and have no
Represent concepts as classes; §16.1.
Define a constructor to handle initialization of objects; §16.2.5.
By default declare single-argument constructors explicit; §16.2.6.
Declare a member function that does not modify the state of its object const; §16.2.9.
A concrete type is the simplest kind of class. Where applicable, prefer a concrete type over
Make a function a member only if it needs direct access to the representation of a class;
Use a namespace to make the association between a class and its helper functions explicit;
first, the constructor invokes its base class constructors,
then, it invokes the member constructors, and
finally, it executes its own body.
first, the destructor executes its own body,
then, it invokes its member destructors, and
finally, it invokes its base class destructors.
Prohibit copying of the base class: delete the copy operations (§17.6.4).
Establish an invariant in a constructor (including possibly resource acquisition).
Maintain the invariant with copy and move operations (with the usual names and types).
Do any needed cleanup in the destructor (incl. possibly resource release).
Is a default constructor needed (because the default one is not adequate or has been suppressed by another constructor)?
Is a destructor needed (e.g., because some resource needs to be released)?
Are copy operations needed (because the default copy semantics is not adequate, e.g.,
Are move operations needed (because the default semantics is not adequate, e.g., because
Design constructors, assignments, and the destructor as a matched set of operations; §17.1.
If a class has a virtual function, it needs a virtual destructor; §17.2.5.
If a class does not have a constructor, it can be initialized by memberwise initialization;
Prefer {} initialization over = and () initialization; §17.3.2.
Give a class a default constructor if and only if there is a ‘‘natural’’ default value; §17.3.3.
If a class is a container, give it an initializer-list constructor; §17.3.4.
Initialize members and bases in their order of declaration; §17.4.1.
an implicit conversion from a user-defined type to a built-in type (because the built-in
a conversion from a new class to a previously defined class (without modifying the declaration for the old class).
Define operators primarily to mimic conventional usage; §18.1.
The function can access the private part of the class declaration.
The function is in the scope of the class.
The function must be invoked on an object (has a this pointer).
Use operator[]() for subscripting and for selection based on a single value; §19.2.1.
Use operator−>() to dereference ‘‘smart pointers’’; §19.2.3.
Prefer prefix ++ over suffix ++; §19.2.4.
Define the global operator new() and operator delete() only if you really have to; §19.2.5.
Define member operator new() and member operator delete() to control allocation and deallocation of objects of a specific class or hierarchy of classes; §19.2.5.
Use user-defined literals to mimic conventional notation; §19.2.6.
Place literal operators in separate namespaces to allow selective use; §19.2.6.
For nonspecialized uses, prefer the standard string (Chapter 36) to the result of your own
Ensure that only objects of a single type are pointed to (§3.4, Chapter 23).
Place a type field in the base class for the functions to inspect.
Use dynamic_cast (§22.2, §22.6).
Use virtual functions (§3.2.3, §20.3.2).
The user-interface system should be an implementation detail that is hidden from users
The Ival_box class should contain no data.
No recompilation of code using the Ival_box family of classes should be required after a
Ival_boxes for different interface systems should be able to coexist in our program.
A Radio object has two subobjects of class Storable (one for Transmitter and one for
A Radio object has one subobject of class Storable (shared by Transmitter and Receiver).
Make the data nonlocal (outside the class as a global or namespace variable).
Put the data in a base class.
Allocate an object somewhere and give each of the two classes a pointer.
Use virtual functions to ensure that the same operation is performed independently of which
Use dynamic_cast where class hierarchy navigation is unavoidable; §22.2.
Use dynamic_cast for type-safe explicit navigation of a class hierarchy; §22.2.1.
Use dynamic_cast to a reference type when failure to find the required class is considered a
Use dynamic_cast to a pointer type when failure to find the required class is considered a
Use double dispatch or the visitor pattern to express operations on two dynamic types (unless
Don’t call virtual functions during construction or destruction; §22.4.
Use typeid to implement extended type information; §22.5.1.
Use typeid to find the type of an object (and not to find an interface to an object); §22.5.
Find the set of function template specializations (§23.2.2) that will take part in overload
If two function templates can be called and one is more specialized than the other
Do overload resolution for this set of functions, plus any ordinary functions, as for ordinary functions (§12.3). If a function template’s argument has been determined by template argument deduction (§23.5.2), that argument cannot also have promotions, standard
If a function and a specialization are equally good matches, the function is preferred.
If no match is found, the call is an error. If we end up with two or more equally good
Include template definitions before their use in a translation unit.
Include template declarations (only) before their use in a translation unit. Include definitions of templates later in the translation unit (potentially after their use).
Include template declarations (only) before their use in a translation unit. Define the templates in some other translation unit.
First, we look at our (initial) implementation and determine which properties (operations,
Next, we look at plausible alternative template implementations and list their requirements on their template arguments. Doing so, we may decide that we should place more
Finally, we look at the resulting list (or lists) of required properties and compare it to lists
Cs are copied by copy assignment and copy initialization.
String compares Cs using == and !=.
String makes arrays of Cs (that implies default construction of Cs).
String takes the address of Cs.
Cs are destroyed when a String is destroyed.
String has >> and << operators that somehow must read and write Cs.
No ordering (e.g., <)
No conversion to an integer value
A template value argument (e.g., a pointer to a comparison function)
A template type argument to the map template determining the type of a comparison
Use templates to improve type safety; §25.1.
Remember that value template arguments must be compile-time constants; §25.2.2.
Use function objects as type arguments to parameterize types and algorithms with ‘‘policies’’; §25.2.3.
Use default template arguments to provide simple notation for simple uses; §25.2.5.
Specialize templates for irregular types (such as arrays); §25.3.
Specialize templates to optimize for important cases; §25.3.
Define the primary template before any specialization; §25.3.1.1.
The context of the template definition
The context of the argument type declaration
The context of the use of the template
Dependent names: names that depend on a template parameter. Such names are bound at
Nondependent names: names that don’t depend on a template parameter. Such names are
The type of the actual argument depends on a template parameter T according to the type
The function called has a parameter that depends on T according to the type deduction
Generate a specialization the first time a call is seen.
At the end of a translation unit, generate all specializations needed for it.
Once every translation unit of a program has been seen, generate all specializations
the names in scope at the point where the template is defined, plus
the names in the namespace of an argument of a dependent call (§14.2.4).
Let the compiler/implementation generate specializations as needed; §26.2.1.
Keep the binding context unchanged between instantiation points; §26.3.4.
Avoid fully general templates that can be found by ADL; §26.3.6.
Use concepts and/or static_assert to avoid using inappropriate templates; §26.3.6.
Use using-declarations to limit the reach of ADL; §26.3.6.
No computation (just pass type and value arguments)
Simple computation (on types or values) not using compile-time tests or iteration, for
Computation using explicit compile-time tests, for example, a compile-time if (§28.3).
Computation using compile-time iteration (in the form of recursion; §28.3.2).
Does it require explicit tests?
Does it require recursion?
Can we write concepts (§24.3) for our template arguments?
Handle the case where there is just one argument (the format string).
Handle the case where there is at least one ‘‘additional’’ argument that, suitably formatted, needs to output at an appropriate point indicated by the format string.
The number of temporaries must be minimized.
Copying of matrices must be minimized.
Multiple loops over the same data in composite operations must be minimized.
List basic use cases; §29.1.1.
Use standard-library facilities to maintain portability; §30.1, §30.1.1.
Use standard-library facilities as a model for flexible, widely usable software; §30.1.1.
The standard-library facilities are defined in namespace std and found in standard-library
A C standard-library header X.h is presented as a C++ standard-library header in <cX>; §30.2.
Do not try to use a standard-library facility without #includeing its header; §30.2.
To use a range-for on a built-in array, #include<iterator>; §30.3.2.
Prefer exception-based error handling over return-code-based error handling; §30.4.
Irreflexivity: cmp(x,x) is false.
Antisymmetry: cmp(x,y) implies !cmp(y,x).
Transitivity: If cmp(x,y) and cmp(y,z), then cmp(x,z).
Transitivity of equivalence: Define equiv(x,y) to be !(cmp(x,y)||cmp(y,x)). If equiv(x,y) and
Use resource handles with the proper semantics for an application whenever possible.
Use unique_ptrs to hold on to objects that do not implicitly manage their own resources
Use shared_ptrs to hold objects that require shared ownership.
Use <chrono> facilities, such as steady_clock, duration, and time_point for timing; §35.2.
A locale encapsulates cultural conventions, such as the appearance of a date. Such conventions vary in many subtle and unsystematic ways. These conventions have nothing to
The concept of a locale must be extensible, because it is not possible to enumerate every
A locale is used in operations (e.g., I/O and sorting) from which people demand run-time
A locale must be invisible to the majority of programmers who want to benefit from facilities ‘‘doing the right thing’’ without having to know exactly what ‘‘the right thing’’ is or
A locale must be available to designers of facilities that deal with culture-sensitive information beyond the scope of the standard.
That is not the way the world is. The complexities of machine architectures are real, and
We (the C++ standards committee) seriously considered that. We would have liked to
Create a number of tasks to be run.
Run the tasks in parallel.
Merge the results.
A thread is a type-safe interface to a system thread; §42.2.
Use fstreams rather than fopen()/fclose() if you worry about resource leaks; §43.2.
Use the C memory management routines, such as memcpy(), only for raw memory; §43.5.
Prefer vector to uses of malloc() and realloc(); §43.5.
Beware that the C standard library does not know about constructors and destructors; §43.5.
Prefer <chrono> to <ctime> for timing; §43.6.
For flexibility, ease of use, and performance, prefer sort() over qsort(); §43.7.
Uniform and general initialization using {}-lists (§2.2.2, §6.3.5)
Type deduction from initializer: auto (§2.2.2, §6.3.6.1)
Prevention of narrowing (§2.2.2, §6.3.5)
Generalized and guaranteed constant expressions: constexpr (§2.2.3, §10.4, §12.1.6)
Range-for-statement (§2.2.5, §9.5.1)
Null pointer keyword: nullptr (§2.2.5, §7.2.2)
Scoped and strongly typed enums: enum class (§2.3.3, §8.4.1)
Compile-time assertions: static_assert (§2.4.3.3, §24.4)
Language mapping of {}-list to std::initializer_list (§3.2.1.3, §17.3.4)
initializer_list constructors for containers (§3.2.1.3, §17.3.4, §31.3.2)
Move semantics for containers (§3.3.1, §17.5.2, §31.3.2)
A singly-linked list: forward_list (§4.4.5, §31.4.2)
Hash containers: unordered_map, unordered_multimap, unordered_set, and unordered_multiset (§4.4.5, §31.4.3)
Resource management pointers: unique_ptr, shared_ptr, and weak_ptr (§5.2.1, §34.3)
Concurrency support: thread (§5.3.1, §42.2), mutexes (§5.3.4, §42.3.1), locks (§5.3.4,
Higher-level concurrency support: packaged_thread, future, promise, and async() (§5.3.5,
tuples (§5.4.3, §28.5, §34.2.4.2)
Regular expressions: regex (§5.5, Chapter 37)
Variable-length arrays (VLAs); use vector or some form of dynamic array
Designated initializers; use constructors
// comments (§2.2.1, §9.7); added to C99
Support for restricted character sets (§iso.2.4); partially added to C99
Support for extended character sets (§6.2.3); added to C99
Non-constant initializers for objects in static storage (§15.4.1)
const in constant expressions (§2.2.3, §10.4.2)
Declarations as statements (§9.3); added to C99
Declarations in for-statement initializers (§9.5); added to C99
Declarations in conditions (§9.4.3)
Structure names need not be prefixed by struct (§8.2.2)
Function argument type checking (§12.1); partially added to C (§44.3.3)
Type-safe linkage (§15.2, §15.2.3)
Free-store management using new and delete (§11.2)
const (§7.5, §7.5); partially added to C
The Boolean type bool (§6.2.2); partially added to C99
Named casts (§11.5.2)
Classes (Chapter 16)
Member functions (§16.2.1) and member classes (§16.2.13)
Constructors and destructors (§16.2.5, Chapter 17)
Derived classes (Chapter 20, Chapter 21)
virtual functions and abstract classes (§20.3.2, §20.4)
Public/protected/private access control (§16.2.3, §20.5)
friends (§19.4)
Pointers to members (§20.6)
static members (§16.2.12)
Templates (Chapter 23)
Inline functions (§12.1.3); added to C99
Default arguments (§12.2.5)
Function overloading (§12.3)
Namespaces (§14.3.1)
Explicit scope qualification (operator ::; §6.3.4)
Exceptions (§2.4.3.1, Chapter 13)
Run-Time Type Identification (Chapter 22)
Generalized constant expressions (constexpr; §2.2.3, §10.4, §12.1.6)
